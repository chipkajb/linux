#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.

use strict;
use warnings;
use utf8;

my $acpi;
my $status;
my $percent;
my $full_text;
my $short_text;

# Get the output of acpi -b and find the first battery not at 0%
my $acpi_output = `acpi -b`;
my @batteries = split("\n", $acpi_output);

foreach my $line (@batteries) {
    # Check for a battery with non-zero percentage
    if ($line =~ /(Battery \d+): ([\w ]+), (\d+)%/) {
        my ($battery, $status, $percent) = ($1, $2, $3);

        # If percentage is not zero, use this one
        if ($percent > 0) {
            $acpi = $line;
            last;
        }
    }
}

# If no non-zero battery was found, show a warning
if (!defined $acpi) {
    die "No battery with charge found\n";
}


# fail on unexpected output
if ($acpi !~ /: (\w+), (\d+)%/) {
	die "$acpi\n";
}

$status = $1;
$percent = $2;
$full_text = "$percent%";

if ($status eq 'Discharging') {
	$full_text .= '  ';
} elsif ($status eq 'Charging') {
	$full_text .= '  ';
}

$short_text = $full_text;

if ($acpi =~ /(\d\d:\d\d):/) {
	$full_text .= " ($1)";
}

# print text
print "$full_text\n";
print "$short_text\n";

# consider color and urgent flag only on discharge
if ($percent < 25) {
    print "#cc241d\n";
} elsif ($percent < 50) {
    print "#d65d0e\n";
} elsif ($percent < 75) {
    print "#d79921\n";
} else {
    print "#98971a\n";
}

exit(0);

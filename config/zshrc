# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH


# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  zsh-autosuggestions
  zsh-syntax-highlighting
  zsh-history-substring-search
)



# Key bindings for history substring search
bindkey '^[[A' history-substring-search-up    # Up arrow for previous match
bindkey '^[[B' history-substring-search-down  # Down arrow for next match
bindkey '^[^M' autosuggest-accept # alt+enter
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8' # Use a light gray
fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src


source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/$USER/software/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/$USER/software/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/$USER/software/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/$USER/software/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/home/$USER/software/anaconda3/etc/profile.d/mamba.sh" ]; then
    . "/home/$USER/software/anaconda3/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<
conda deactivate

# set paths
export PATH=/usr/local/cuda/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# avoid unnecessary initial conda activations
if [ -z "$VSCODE_GIT_ASKPASS_NODE" ]; then
    conda deactivate
fi
if [ -z "$VSCODE_PID" ]; then
    conda deactivate
    conda deactivate
    conda deactivate
fi

# Python startup
export PYTHONSTARTUP=~/.python_startup.py

python3_func() {
    # Temporarily disable alias to get the real python3 path
    unalias python3 2>/dev/null
    python_bin=$(command -v python3)  # Get the actual binary path

    # Ensure we found a valid Python binary
    if [ -z "$python_bin" ]; then
        echo "Error: python3 not found in PATH."
        return 1
    fi

    # Get the base Python installation path (parent of "bin/")
    python_base_dir=$(dirname $(dirname "$python_bin"))

    # Explicitly set the correct prefix to the Anaconda environment
    export PYTHONPREFIX="$python_base_dir"

    # Explicitly construct paths
    python_stdlib="$python_base_dir/lib/python$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')"
    python_site_packages="$python_stdlib/site-packages"
    python_lib_dynload="$python_stdlib/lib-dynload"

    # Ensure paths exist
    if [ ! -d "$python_stdlib" ] || [ ! -d "$python_site_packages" ] || [ ! -d "$python_lib_dynload" ]; then
        echo "Error: Computed Python paths do not exist."
        return 1
    fi

    # Export paths for the startup script
    export PYTHON_STDLIB="$python_stdlib"
    export PYTHON_SITE_PACKAGES="$python_site_packages"
    export PYTHON_LIB_DYNLOAD="$python_lib_dynload"

    # Execute Python with the startup file
    if [ $# -eq 0 ]; then
        command "$python_bin"
    else
        command "$python_bin" -c "exec(open('$PYTHONSTARTUP').read()); exec(open('$1').read())" "${@:2}"
    fi

    # restore alias
    alias python3=python3_func
}

# Alias python3 to use the function
alias python3=python3_func


# starship
eval "$(starship init zsh)"

# aliases
alias home='cd ~'
alias root='cd /'
alias ..='cd ..'
alias ...='cd ..; cd ..'
alias ....='cd ..; cd ..; cd ..'
alias .....='cd ..; cd ..; cd ..; cd ..'
alias o=xdg-open
alias vim='/usr/bin/nvim.appimage'
alias nvim='/usr/bin/nvim.appimage'
alias vimrc='vim ~/.vimrc'
alias bashrc='vim ~/.bashrc'
alias zshrc='vim ~/.zshrc'
alias grep='grep --color=always'
alias python=python3
alias pip=pip3

# set default editor
export EDITOR=vim
export VISUAL=vim

# customize history
export HISTTIMEFORMAT="%h %d %H:%M:%S " # show date and time in history
export HISTSIZE=10000 # increase history size
export HISTFILESIZE=10000
export HISTCONTROL=erasedups:ignoredups:ignorespace # no duplicate lines of lines that start with a space
# append rather than overwrite history, so if you start a new terminal, you have old session history
PROMPT_COMMAND='history -a'

# check the window size after each command and, if necessary, update the values of LINES and COLUMNS

# git configurations
if ! git config --global user.name &> /dev/null; then
    git config --global user.name "chipkajb"
fi

if ! git config --global user.email &> /dev/null; then
    git config --global user.email "jbc274@cornell.edu"
fi

if ! git config --global push.default &> /dev/null; then
    git config --global push.default simple
fi

git_no_status_check () {
    if ! git config --get oh-my-zsh.hide-status &> /dev/null; then
        git config --add oh-my-zsh.hide-status 1
    fi
    if ! git config --get oh-my-zsh.hide-dirty &> /dev/null; then
        git config --add oh-my-zsh.hide-dirty 1
    fi
}

# add color to man pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# search files in the current folder
alias f="find . | grep "

# helpful commands to count files, print disk space in folder, etc.
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"
alias diskspace="du -S | sort -n -r |more"
alias folders='du -h --max-depth=1'
alias foldersize='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias tree='tree -CAhF --dirsfirst'
alias treed='tree -CAFd'
alias mountedinfo='df -hT'

## Show hidden files ##
alias l.='ls -d .* --color=auto'

## Other aliases ##
alias ls='eza'
alias ll='eza -lh'
alias l.='eza -a'
alias la='eza -lha'
alias ff='fzf --preview "cat {}"'
alias vf='vim $(fzf)'
alias df='df -h'
alias du='du -h'


# Extracts any archive(s) (if unp isn't installed)
extract () {
    for archive in $*; do
        if [ -f $archive ] ; then
            case $archive in
                *.tar.bz2)   tar xvjf $archive    ;;
                *.tar.gz)    tar xvzf $archive    ;;
                *.tar.xz)    tar xf $archive      ;;
                *.bz2)       bunzip2 $archive     ;;
                *.rar)       rar x $archive       ;;
                *.gz)        gunzip $archive      ;;
                *.tar)       tar xvf $archive     ;;
                *.tbz2)      tar xvjf $archive    ;;
                *.tgz)       tar xvzf $archive    ;;
                *.zip)       unzip $archive       ;;
                *.Z)         uncompress $archive  ;;
                *.7z)        7z x $archive        ;;
                *)           echo "don't know how to extract '$archive'..." ;;
            esac
        else
            echo "'$archive' is not a valid file!"
        fi
    done
}
